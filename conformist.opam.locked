opam-version: "2.0"
version: "0.5.0"
synopsis:
  "Conformist allows you to define schemas to decode, validate and sanitize input data declaratively"
description: """

Conformist allows you to define schemas to decode, validate and sanitize input data declaratively.
It comes with runtime types for primitive OCaml types such as `int`, `string`, `bool` and `float` but also `Ptime.date`, optional and custom types.
Re-use business rules in validators and run it on the client side with js_of_ocaml.
Arbitrary meta data can be stored in schemas which is useful to build functionality on top of conformist.
"""
maintainer: ["josef@oxidizing.io"]
authors: ["Josef Erben"]
license: "MIT"
homepage: "https://github.com/oxidizing/conformist"
doc: "https://oxidizing.github.io/conformist/"
bug-reports: "https://github.com/oxidizing/conformist/issues"
depends: [
  "base-bigarray" {= "base"}
  "base-threads" {= "base"}
  "base-unix" {= "base"}
  "conf-m4" {= "1"}
  "dune" {= "2.8.4"}
  "ocaml" {= "4.08.1"}
  "ocaml-system" {= "4.08.1"}
  "ocamlbuild" {= "0.14.0"}
  "ocamlfind" {= "1.8.1"}
  "ptime" {= "0.8.5"}
  "result" {= "1.5"}
  "topkg" {= "1.0.3"}
]
build: [
  ["dune" "subst"] {pinned}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
]
dev-repo: "git+https://github.com/oxidizing/conformist.git"
name: "conformist"
